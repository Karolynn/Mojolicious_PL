
=head1 NAZWA

Mojolicious::Guides::Growing - Rozbudowa

=head1 W SKRÓCIE

Ten dokument wyjaśnia proces rozpoczynania budowy prototypu L<Mojolicious::Lite>
od podstaw i jego rozwój do postaci dobrze zorganizowanej aplikacji L<Mojolicious>.

=head1 ZAŁOŻENIA

Podstawy, które powinien znać każdy programista L<Mojolicious>.

=head2 Model View Controller

MVC jest wzorcem architektury oprogramowania dla aplikacji z graficznym interfejsem
użytkownika, który oddziela logikę aplikacji, prezentację i wejście. Ma on swoje
korzenie w Smalltalk-80.

	    .-------------.    .-------.    .-------.
  Wejście-> |  Kontroler  | -> | Model | -> | Widok | -> Wyjście
	    '-------------'    '-------'    '-------'

Nieznacznie  zmodyfikowana wersja tego schematu przenosząca część logiki aplikacji do C<kontrolera>
jest w dzisiejszych czasach podstawą wielu web frameworków, włącznie z L<Mojolicious>.

               .----------------.     .-------.
  Zapytanie -> |                | <-> | Model |
               |                |     '-------'
               |   Kontroler    |
               |                |     .-------.
  Odpowiedź <- |                | <-> | Widok |
               '----------------'     '-------'

C<Kontroler> otrzymuje zapytanie od użytkownika, przekazuje przychodzące
dane do C<model> i odbiera od niego dane, które następnie są zamieniane
na aktualną odpowiedź przez C<widok>.
Jednak zauważ, że ten wzór jest tylko wytyczną, którą w większości przypadków
daje lepszy kod, a nie żelazną zasadą, której powinieneś się zawsze trzymać.

=head2 REpresentational State Transfer

REST to wzór architektury oprogramowania dla rozproszonych systemów 
hipermediów, tak jak na przykład sieć WWW (web).
Można go zastosować w połączeniu z wieloma protokołami, jednak obecnie
używa się go głównie z C<HTTP>.
Według założeń REST otwierając URL, np. C<http://mojolicio.us/foo>,
tak naprawdę prosisz serwer WWW o HTML-ową C<reprezentację>
zasobu <http://mojolicio.us/foo>.

  .--------.                                 .--------.
  |        | -> http://mojolicio.us/foo   -> |        |
  | Klient |                                 | Serwer |
  |        | <- <html>Mojo rządzi!</html> <- |        |
  '--------'                                 '--------'

Zasadniczą ideą tutaj jest to, że wszystkie zasoby mają jednoznaczny
adres w postaci URL-a i każdy zasób może posiadać różne reprezentacje, takie jak
HTML, RSS czy też JSON.
Zagadnienia związane z interfejsem użytkownika są oddzielone od zagadnień przechowywania
danych i wszystkie stany sesji są przechowywane po stronie klienta.

  .--------------.                        .--------------.
  |         	 | ->    PUT /foo      -> |            	 |
  |         	 | ->    Hello world!  -> |            	 |
  |         	 |                        |            	 |
  |         	 | <-    201 CREATED   <- |            	 |
  |         	 |                        |            	 |
  |         	 | ->    GET /foo      -> |            	 |
  | Przeglądarka |                        |  Serwer WWW  |
  |         	 | <-    200 OK        <- |              |
  |         	 | <-    Hello world!  <- |              |
  |         	 |                        |              |
  |         	 | ->    DELETE /foo   -> |              |
  |         	 |                        |              |
  |         	 | <-    200 OK        <- |              |
  '--------------'                        '--------------'

Pomimo tego, że metody HTML, takie jak C<PUT>, C<GET> i C<DELETE> nie są bezpośrednio
częścią REST, to dobrze z nim współpracują i są powszechnie używane do manipulowania
C<zasobami>.

=head2 Sesje

HTTP został zaprojektowany jako bezstanowy protokół: serwery WWW nie wiedzą niczego
o poprzednich zapytaniach, co powoduje, że budowanie przyjaznych dla użytkownika systemów
logowania staje się bardzo trudne. Sesje rozwiązują ten problem, ponieważ pozwalają aplikacjom
webowym na przechowywanie informacji o stanach pomiędzy zapytaniami HTTP.

  GET /login?user=sri&pass=s3cret HTTP/1.1
  Host: mojolicio.us

  HTTP/1.1 200 OK
  Set-Cookie: sessionid=987654321
  Content-Length: 10
  Hello sri.

  GET /protected HTTP/1.1
  Host: mojolicio.us
  Cookie: $Version=1; sessionid=987654321

  HTTP/1.1 200 OK
  Set-Cookie: sessionid=987654321
  Content-Length: 16
  Hello again sri.

Tradycyjnie wszystkie dane sesji były przechowywane po stronie serwera i tylko
id sesji były wymieniane pomiędzy przeglądarką a serwerem WWW w formie ciasteczek.

  HTTP/1.1 200 OK
  Set-Cookie: session=base64(hmac-md5(json($session)))

W L<Mojolicious> jednak idziemy z tą koncepcją o krok dalej poprzez
przechowywanie wszystkiego w ciasteczkach podpisanych C<HMAC-MD5>,
co bardziej odpowiada filozofii REST i redukuje wymagania
wobec infrastruktury.

=head2 Programowanie Oparte na Testach (Test Driven Development)

TDD to proces rozwoju oprogramowania, w którym programista zaczyna pisanie
aplikacji od przypadków nieprzechodzących testów, które definiują żądaną
funkcjonalność, a następnie tworzy kod, który przechodzi te testy.
Jest z tego wiele korzyści, na przykład dobre pokrycie kodu testami (test coverage)
i posiadanie kodu dobrze przygotowanego do testowania, co z kolei
pomaga zapobiegać psuciu się starego kodu przez nowo wprowadzane zmiany.
L<Mojolicious> zostało w większości napisane z zastosowaniem TDD.

=head1 PROTOTYP

Jedną z głównych różnic pomiędzy L<Mojolicious> i innymi frameworkami
jest to, że zawiera on L<Mojolicious::Lite>, mikro-framework webowy
zoptymalizowany do szybkiego tworzenia prototypów.

=head2 Różnice

Prawdopodobnie znasz to uczucie, kiedy masz bardzo dobry pomysł i chcesz
go wdrożyć w życie tak szybko, jak to możliwe. Właśnie dlatego aplikacje
L<Mojolicious::Lite> potrzebują tylko jednego pliku.

  myapp.pl   # Szablony, a nawet pliki statyczne mogą być wstawione w kod.

Z drugiej strony, pełne aplikacje L<Mojolicious> są bliższe świetnie
zorganizowanej dystrybucji CPAN, co ułatwia ich utrzymywanie.

  myapp                      # Katalog aplikacji
  |- script                  # Katalog skryptu
  |  `- myapp                # Skrypt aplikacji
  |- lib                     # Katalog bibliotek
  |  |- MyApp.pm             # Klasa aplikacji
  |  `- MyApp                # Przestrzeń nazw aplikacji
  |     `- Example.pm        # Klasa kontrolera
  |- t                       # Katalog testów
  |  `- basic.t              # Plik testu
  |- log                     # Katalog logów
  |  `- development.log      # Plik logu trybu kreatora
  |- public                  # Katalog plików statycznych (podawany automatycznie)
  |  `- index.html           # Plik statycznego HTML
  `- templates               # Katalog szablonu
     |- layouts              # Katalog szablonu dla układów
     |  `- default.html.ep   # Katalog układów
     `- example              # Katalog szablonu dla kontrolera "Example"
        `- welcome.html.ep   # Katalog dla akcji "welcome"

Oba szkielety aplikacji mogą być generowane automatycznie.

  $ mojo generate lite_app
  $ mojo generate app

=head2 Podstawa

Zaczynamy naszą nową aplikację od jednego, wykonywalnego skryptu Perla.

  $ mkdir myapp
  $ cd myapp
  $ touch myapp.pl
  $ chmod 744 myapp.pl

To będzie podstawą dla naszej przykładowej aplikacji do obsługi logowania.

  #!/usr/bin/env perl
  use Mojolicious::Lite;

  get '/' => sub {
    my $self = shift;
    $self->render(text => 'Hello world!');
  };

  app->start;

Wbudowany serwer WWW, dzięki automatycznemu przeładowywaniu, sprawia, że praca
nad aplikacją staje się łatwa i przyjemna.

  $ morbo myapp.pl
  Server available at http://127.0.0.1:3000.

Po prostu zapisz swoje zmiany. Będą one widoczne po odświeżeniu w przeglądarce.

=head2 Model

W L<Mojolicious> aplikacje webowe są traktowane jak zwykły interfejs
dla istniejącej logiki biznesowej. L<Mojolicious> z założenia jest niezależne
od warstwy C<modelu> i pozwala używać dowolnych modułów Perla.

  $ mkdir lib
  $ touch lib/MyUsers.pm
  $ chmod 644 lib/MyUsers.pm

Nasza aplikacja obsługująca logowanie wykorzysta najzwyklejszy moduł Perla,
wydzielając całą logikę związaną z dopasowywaniem nazw użytkowników i haseł.

  package MyUsers;

  use strict;
  use warnings;

  my $USERS = {
    sri    => 'secr3t',
    marcus => 'lulz',
    yko    => 'zeecaptain'
  };

  sub new { bless {}, shift }

  sub check {
    my ($self, $user, $pass) = @_;

    # Sukces
    return 1 if $USERS->{$user} && $USERS->{$user} eq $pass;

    # Porażka
    return;
  }

  1;

Za sprawą metody C<helper> możemy stworzyć prostą funkcję pomocniczą,
aby nasz C<model> stał się dostępny dla wszystkich akcji i szablonów.

  #!/usr/bin/env perl
  use Mojolicious::Lite;

  use lib 'lib';
  use MyUsers;

  # Instancja modelu
  my $users = MyUsers->new;

  # Funkcja pomocnicza zwracająca naszą instancję modelu
  helper users => sub { return $users };

  # /?user=sri&pass=secr3t
  any '/' => sub {
    my $self = shift;

    # Parametry zapytania
    my $user = $self->param('user') || '';
    my $pass = $self->param('pass') || '';

    # Sprawdzanie hasła
    return $self->render(text => "Witaj $user.")
      if $self->users->check($user, $pass);

    # Nie powiodło się
    $self->render(text => 'Niepoprawna nazwa użytkownika lub hasło.');
  };

  app->start;

Metoda C<param> naszej instancji L<Mojolicious::Controller>
pozwala za jednym zamachem odczytać parametry zapytania,
parametry POST i parametry z trasy.

=head2 Testowanie

W L<Mojolicious> bardzo poważnie podchodzimy do programowania
w oparciu o testy (TDD) i zachęcamy do stosowania tej metody zawsze,
gdy jest to możliwe.

  $ mkdir t
  $ touch t/login.t
  $ chmod 644 t/login.t

L<Test::Mojo> jest klientem HTTP obsługującym skrypty, który został
zaprojektowany specjalnie na potrzeby testowania. Ma on wiele ciekawych
i przydatnych funkcji, jak choćby obsługę selektorów CSS3 w oparciu
o L<Mojo::DOM>.

  use Test::More tests => 16;
  use Test::Mojo;

  # Załącz aplikację
  use FindBin;
  require "$FindBin::Bin/../myapp.pl";

  # Zezwól na przekierowanie 302
  my $t = Test::Mojo->new->max_redirects(1);

  # Sprawdź, czy istnieje HTML-owy formularz logowania
  $t->get_ok('/')->status_is(200)
    ->element_exists('form input[name="user"]')
    ->element_exists('form input[name="pass"]')
    ->element_exists('form input[type="submit"]');

  # Sprawdź, czy w logowaniu podano prawidłowe dane
  $t->post_form_ok('/' => {user => 'sri', pass => 'secr3t'})
    ->status_is(200)->text_like('html body' => qr/Witaj sri/);

  # Testuj dostęp do zabezpieczonej strony
  $t->get_ok('/zabezpieczone')->status_is(200)->text_like('a' => qr/Wyloguj/);

  # Sprawdź, czy formularz logowania pokazuje się ponownie po wylogowaniu
  $t->get_ok('/wyloguj')->status_is(200)
    ->element_exists('form input[name="user"]')
    ->element_exists('form input[name="pass"]')
    ->element_exists('form input[type="submit"]');

Od teraz możesz zawsze sprawdzić u siebie swój postęp pracy poprzez uruchomienie
testów jednostkowych na swojej aplikacji.

  $ ./myapp.pl test
  $ ./myapp.pl test t/login.t

By testy nie generowały zbyt wielu informacji i by pokazywane były tylko wiadomości
typu C<error> (błąd), możesz dodać następujący wiersz kodu:

  $t->app->log->level('error');

Szybkie zapytania C<GET> mogą być wykonywane prosto z wiersza poleceń.

  $ ./myapp.pl get /
  Niewłaściwa nazwa użytkownika lub hasło.

  $ ./myapp.pl get -v '/?user=sri&pass=secr3t'
  HTTP/1.1 200 OK
  Connection: Keep-Alive
  Date: Sun, 18 Jul 2010 13:09:58 GMT
  Server: Mojolicious (Perl)
  Content-Length: 12
  Content-Type: text/plain

  Witaj sri.

=head2 Przechowywanie stanu

Sesje w L<Mojolicious> bardzo dobrze działają właściwie z marszu i nie wymagają konfiguracji,
jednak sugerujemy używanie bardziej bezpiecznego tekstu szyfrującego C<secret>.

  app->secret('Mojolicious rządzi');

Ten tekst szyfrujący jest używany przez algorytm C<HMAC-MD5> do stworzenia zabezpieczenia
podpisanych ciasteczek i może być zmieniony w dowolnym momencie do unieważnienia wszystkich istniejących sesji.

  $self->session(user => 'sri');
  my $user = $self->session('user');

Domyślnie wszystkie sesje wygasają po godzinie. Dla większej kontroli możesz również
użyć wartości C<expires> sesji, aby ustawić datę wygasania na konkretny czas czas w sekundach
(liczony od tzw. epoki, czyli od 01.01.1970).

  $self->session(expires => time + 3600);

Każda sesja może być usunięta przez ustawienie jej daty wygasania w przeszłości.

  $self->session(expires => 1);

Dla danych, które powinny być widoczne tylko w następnym załadowaniu strony, jak na przykład
potwierdzenie wiadomości po przekierowaniu 302, możesz użyć wiadomości C<flash>.

  $self->flash(message => 'Wszystko w porządku.');
  $self->redirect_to('do widzenia');

Pamiętaj tylko, że wszystko jest przechowywane w ciasteczkach podpisanych <HMAC-MD5>,
więc zwykle obowiązuje limit 4096 bajtów, w zależności od przeglądarki.

=head2 Końcowy prototyp

Końcowy prototyp C<myapp.pl> przechodzący wszystkie pojedyncze testy powyżej mógłby wyglądać
następująco:

  #!/usr/bin/env perl
  use Mojolicious::Lite;

  use lib 'lib';
  use MyUsers;

  # Zabezpiecz podpisane ciasteczka
  app->secret('Mojolicious rządi');

  my $users = MyUsers->new;
  helper users => sub { return $users };

  # Główna akcja logowania
  any '/' => sub {
    my $self = shift;

    # Parametry zapytania lub POST
    my $user = $self->param('user') || '';
    my $pass = $self->param('pass') || '';

    # Sprawdź hasło i wyświetl "index.html.ep", jeśli to konieczne
    return $self->render unless $self->users->check($user, $pass);

    # Przechowuj nazwę użytkownika w sesji
    $self->session(user => $user);

    # Przechowuj przyjazną wiadomość flash
    $self->flash(message => 'Dziękujemy za zalogowanie się.');

    # Wykonaj przekierowanie 302 do zabezpieczonej strony
    $self->redirect_to('protected');
  } => 'index';

  # Zabezpieczona strona automatycznie wyświetlająca "protected.html.ep"
  get '/protected' => sub {
    my $self = shift;

    # Przekieruj na stronę główną z odpowiedzią 302, jeśli użytkownik nie jest zalogowany
    return $self->redirect_to('index') unless $self->session('user');
  };

  # Akcja wylogowywania
  get '/logout' => sub {
    my $self = shift;

    # Zakończ i automatycznie wyczyść sesję
    $self->session(expires => 1);

    # Przekieruj na stronę główną z odpowiedzią 302
    $self->redirect_to('index');
  };

  app->start;
  __DATA__

  @@ index.html.ep
  % layout 'default';
  %= form_for index => begin
    % if (param 'user') {
      <b>Niepoprawna nazwa użytkownika lub hasło, spróbuj ponownie</b><br>
    % }
    Nazwa:<br>
    %= text_field 'user'
    <br>Hasło:<br>
    %= password_field 'pass'
    <br>
    %= submit_button 'Login'
  % end

  @@ protected.html.ep
  % layout 'default';
  % if (my $message = flash 'message') {
    <b><%= $message %></b><br>
  % }
  Witaj <%= session 'user' %>.<br>
  %= link_to Logout => 'logout'

  @@ layouts/default.html.ep
  <!DOCTYPE html>
  <html>
    <head><title>Obsługa logowania</title></head>
    <body><%= content %></body>
  </html>

Listę wszystkich wbudowanych metod pomocniczych można znaleźć w
L<Mojolicious::Plugin::DefaultHelpers> i
L<Mojolicious::Plugin::TagHelpers>.

=head1 DOBRZE ZBUDOWANA APLIKACJA

Ze względu na elastyczność L<Mojolicious> rozbudowywanie aplikacji
może być prowadzone na różne sposoby. Tu postaramy się przedstawić
ogólne możliwości.

=head2 Wyodrębnianie szablonów

Wszystkie szablony i pliki statyczne w linii w sekcji C<DATA> mogą być
automatycznie zmienione w oddzielne pliki w katalogach C<templates>
i C<public>.

  $ ./myapp.pl inflate

Te katalogi zawsze dostają priorytet, więc wyodrębnianie może być również świetnym sposobem,
by umożliwić użytkownikom dostosowywanie aplikacji do ich potrzeb.

=head2 Uproszczona klasa aplikacji

Ta klasa jest sercem każdej pełnej aplikacji L<Mojolicious> i jej instancja
jest zawsze tworzona podczas uruchamiania serwera.

  $ touch lib/MyApp.pm
  $ chmod 644 lib/MyApp.pm

Zaczniemy od wyodrębnienia wszystkich akcji z C<myapp.pl> i zamianę ich
w uproszczone trasy hybrydowe w routerze L<Mojolicious::Routes>. W obecnym
kodzie akcji nie trzeba wprowadzać żadnych zmian.

  package MyApp;
  use Mojo::Base 'Mojolicious';

  use MyUsers;

  sub startup {
    my $self = shift;

    $self->secret('Mojolicious rządzi');
    my $users = MyUsers->new;
    $self->helper(users => sub { return $users });

    # Router
    my $r = $self->routes;

    $r->any('/' => sub {
      my $self = shift;

      my $user = $self->param('user') || '';
      my $pass = $self->param('pass') || '';
      return $self->render unless $self->users->check($user, $pass);

      $self->session(user => $user);
      $self->flash(message => 'Dziękujemy za zalogowanie się.');
      $self->redirect_to('protected');
    } => 'index');

    $r->get('/protected' => sub {
      my $self = shift;
      return $self->redirect_to('index') unless $self->session('user');
    });

    $r->get('/logout' => sub {
      my $self = shift;
      $self->session(expires => 1);
      $self->redirect_to('index');
    });
  }

  1;

Metoda C<startup> w L<Mojolicious> jest wywoływana zaraz po utworzeniu instancji
i jest to miejsce, gdzie wszystkie aplikacje są ustawiane.

=head2 Uproszczony skrypt aplikacji

C<myapp.pl> może zostać teraz zamieniona w uproszczony skrypt aplikacji,
aby umożliwić uruchomienie testów jednostkowych.

  #!/usr/bin/env perl

  use strict;
  use warnings;

  use lib 'lib';
  use Mojolicious::Commands;

  # Aplikacja
  $ENV{MOJO_APP} = 'MyApp';

  # Start komend
  Mojolicious::Commands->start;

=head2 Klasa kontrolera

Trasy hybrydowe są dobrym półśrodkiem, jednak w celu
ułatwienia dalszego rozwoju aplikacji, rozsądnie
jest oddzielić kod akcji od tras (routingu).

  $ mkdir lib/MyApp
  $ touch lib/MyApp/Login.pm
  $ chmod 644 lib/MyApp/Login.pm

Nadal nie musimy niczego zmieniać w obecnym kodzie akcji.

  package MyApp::Login;
  use Mojo::Base 'Mojolicious::Controller';

  sub index {
    my $self = shift;

    my $user = $self->param('user') || '';
    my $pass = $self->param('pass') || '';
    return $self->render unless $self->users->check($user, $pass);

    $self->session(user => $user);
    $self->flash(message => 'Dziękujemy za zalogowanie się.');
    $self->redirect_to('protected');
  }

  sub protected {
    my $self = shift;
    return $self->redirect_to('index') unless $self->session('user');
  }

  sub logout {
    my $self = shift;
    $self->session(expires => 1);
    $self->redirect_to('index');
  }

  1;

Wszystkie kontrolery L<Mojolicious::Controller> są zwyczajnymi klasami Perla,
a ich instancje są tworzone na żądanie.

=head2 Klasy aplikacji

Klasa aplikacji-C<lib/MyApp.pm> może być teraz zredukowana do modelu i definicji tras.

  package MyApp;
  use Mojo::Base 'Mojolicious';

  use MyUsers;

  sub startup {
    my $self = shift;

    $self->secret('Mojolicious rządzi');
    my $users = MyUsers->new;
    $self->helper(users => sub { return $users });

    my $r = $self->routes;
    $r->any('/')->to('login#index')->name('index');
    $r->get('/protected')->to('login#protected')->name('protected');
    $r->get('/logout')->to('login#logout')->name('logout');
  }

  1;

L<Mojolicious::Routes> pozwala definiować trasy na różne sposoby, według
twojego upodobania.

=head2 Szablony

Szablony są zwykle związane z kontrolerami, więc muszą być przeniesione
do odpowiednich katalogów.

  $ mkdir templates/login
  $ mv templates/index.html.ep templates/login/index.html.ep
  $ mv templates/protected.html.ep templates/login/protected.html.ep

=head2 Skrypt

Ostatecznie C<myapp.pl> może być zastąpiony właściwym skryptem L<Mojolicious>.

  $ rm myapp.pl
  $ mkdir script
  $ touch script/myapp
  $ chmod 744 script/myapp

Kod wykrywający biblioteki został specjalnie zaprojektowany dla problematycznych
środowisk produkcyjnych.

  #!/usr/bin/env perl

  use strict;
  use warnings;

  use File::Basename 'dirname';
  use File::Spec;

  use lib join '/', File::Spec->splitdir(dirname(__FILE__)), 'lib';
  use lib join '/', File::Spec->splitdir(dirname(__FILE__)), '..', 'lib';

  # Sprawdź, czy Mojolicious jest zainstalowane
  die <<EOF unless eval 'use Mojolicious::Commands; 1';
  Wygląda na to, że framework Mojolicious nie jest zainstalowany.
  Odwiedź stronę http://mojolicio.us, aby zobaczyć szczegółową instrukcję obsługi.

  EOF

  # Aplikacja
  $ENV{MOJO_APP} ||= 'MyApp';

  # Polecenia startowe
  Mojolicious::Commands->start;

=head2 Uproszczone testy

Zwykłe aplikacje L<Mojolicious> są trochę prostsze do testowania i nie potrzebują
pomocy z wykrywaniem katalogu domowego, więc test C<t/login.t> może być uproszczony.

  use Test::More tests => 16;
  use Test::Mojo;

  # Załaduj klasy aplikacji
  my $t = Test::Mojo->new('MyApp')->max_redirects(1);

  $t->get_ok('/')->status_is(200)
    ->element_exists('form input[name="user"]')
    ->element_exists('form input[name="pass"]')
    ->element_exists('form input[type="submit"]');

  $t->post_form_ok('/' => {user => 'sri', pass => 'secr3t'})
    ->status_is(200)->text_like('html body' => qr/Welcome sri/);

  $t->get_ok('/protected')->status_is(200)->text_like('a' => qr/Logout/);

  $t->get_ok('/logout')->status_is(200)
    ->element_exists('form input[name="user"]')
    ->element_exists('form input[name="pass"]')
    ->element_exists('form input[type="submit"]');

Warto poświęcić trochę czasu na przyzwyczajenie się do programowania
opartego na testach (test driven development)!

=head1 WIĘCEJ

Możesz teraz czytać kolejne artykuły z L<Mojolicious::Guides> lub zerknąć
na wiki Mojolicious L<http://github.com/kraih/mojo/wiki>, które zawiera znacznie
więcej dokumentacji i przykładów nadesłanych przez wiele różnych autorów.

=cut
